import java.time.Duration

enum TestCategories {
    Kafka,
    Logout,
    CAS,
    ExpirationPolicy,
    Metrics,
    Tickets,
    PasswordOps,
    Attributes,
    Audits,
    Web,
    Infinispan,
    Spnego,
    WebApp,
    Authentication,
    ActuatorEndpoint,
    RegisteredService,
    Utility,
    WSFederation,
    SMS,
    CasConfiguration,
    Hazelcast,
    JMX,
    Simple,
    MFA,
    X509,
    SHELL,
    Cassandra,
    Webflow,
    WebflowConfig,
    WebflowEvents,
    WebflowActions,
    WebflowMfaActions,
    CosmosDb,
    ZooKeeper,
    JMS,
    AmazonWebServices,
    Radius,
    Couchbase,
    CouchDb,
    MySQL,
    Postgres,
    MsSqlServer,
    MariaDb,
    DynamoDb,
    Ehcache,
    FileSystem,
    Ignite,
    InfluxDb,
    Oracle,
    Ldap,
    Groovy,
    Mail,
    RestfulApi,
    Memcached,
    MongoDb,
    Redis,
    OAuth,
    UMA,
    OIDC,
    SAML,
    JDBC
}

if (rootProject.tasks.findByName("testCategories") == null) {
    rootProject.tasks.create(name: "testCategories", description: "Display all available test categories") {
        doLast {
            println("Found ${TestCategories.values().length} test categories:")
            println(TestCategories.values().toSorted({ o1, o2 ->
                o1.name().compareTo(o2.name())
            }))
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Kafka.name())) {
    task testKafka(type: Test) {
        enabled = shouldTest(project, TestCategories.Kafka.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Kafka.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Logout.name())) {
    task testLogout(type: Test) {
        enabled = shouldTest(project, TestCategories.Logout.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Logout.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.CAS.name())) {
    task testCAS(type: Test) {
        enabled = shouldTest(project, TestCategories.CAS.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.CAS.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.ExpirationPolicy.name())) {
    task testExpirationPolicy(type: Test) {
        enabled = shouldTest(project, TestCategories.ExpirationPolicy.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.ExpirationPolicy.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Metrics.name())) {
    task testMetrics(type: Test) {
        enabled = shouldTest(project, TestCategories.Metrics.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Metrics.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Tickets.name())) {
    task testTickets(type: Test) {
        enabled = shouldTest(project, TestCategories.Tickets.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Tickets.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.PasswordOps.name())) {
    task testPasswordOps(type: Test) {
        enabled = shouldTest(project, TestCategories.PasswordOps.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.PasswordOps.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Attributes.name())) {
    task testAttributes(type: Test) {
        enabled = shouldTest(project, TestCategories.Attributes.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Attributes.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Audits.name())) {
    task testAudits(type: Test) {
        enabled = shouldTest(project, TestCategories.Audits.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Audits.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Web.name())) {
    task testWeb(type: Test) {
        enabled = shouldTest(project, TestCategories.Web.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Web.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Infinispan.name())) {
    task testInfinispan(type: Test) {
        enabled = shouldTest(project, TestCategories.Infinispan.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Infinispan.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Spnego.name())) {
    task testSpnego(type: Test) {
        enabled = shouldTest(project, TestCategories.Spnego.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Spnego.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.WebApp.name())) {
    task testWebApp(type: Test) {
        enabled = shouldTest(project, TestCategories.WebApp.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.WebApp.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Authentication.name())) {
    task testAuthentication(type: Test) {
        enabled = shouldTest(project, TestCategories.Authentication.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Authentication.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.ActuatorEndpoint.name())) {
    task testActuatorEndpoint(type: Test) {
        enabled = shouldTest(project, TestCategories.ActuatorEndpoint.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.ActuatorEndpoint.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.RegisteredService.name())) {
    task testRegisteredService(type: Test) {
        enabled = shouldTest(project, TestCategories.RegisteredService.name())
//        finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.RegisteredService.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Utility.name())) {
    task testUtility(type: Test) {
        enabled = shouldTest(project, TestCategories.Utility.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Utility.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.WSFederation.name())) {
    task testWSFederation(type: Test) {
        enabled = shouldTest(project, TestCategories.WSFederation.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.WSFederation.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.SMS.name())) {
    task testSMS(type: Test) {
        enabled = shouldTest(project, TestCategories.SMS.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.SMS.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.CasConfiguration.name())) {
    task testCasConfiguration(type: Test) {
        enabled = shouldTest(project, TestCategories.CasConfiguration.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.CasConfiguration.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Hazelcast.name())) {
    task testHazelcast(type: Test) {
        enabled = shouldTest(project, TestCategories.Hazelcast.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Hazelcast.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.JMX.name())) {
    task testJMX(type: Test) {
        enabled = shouldTest(project, TestCategories.JMX.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.JMX.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Simple.name())) {
    task testSimple(type: Test) {
        enabled = shouldTest(project, TestCategories.Simple.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Simple.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.MFA.name())) {
    task testMFA(type: Test) {
        enabled = shouldTest(project, TestCategories.MFA.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.MFA.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.X509.name())) {
    task testX509(type: Test) {
        enabled = shouldTest(project, TestCategories.X509.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.X509.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.SHELL.name())) {
    task testSHELL(type: Test) {
        enabled = shouldTest(project, TestCategories.SHELL.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.SHELL.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Cassandra.name())) {
    task testCassandra(type: Test) {
        enabled = shouldTest(project, TestCategories.Cassandra.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Cassandra.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Webflow.name())) {
    task testWebflow(type: Test) {
        enabled = shouldTest(project, TestCategories.Webflow.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Webflow.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.WebflowConfig.name())) {
    task testWebflowConfig(type: Test) {
        enabled = shouldTest(project, TestCategories.WebflowConfig.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.WebflowConfig.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.WebflowEvents.name())) {
    task testWebflowEvents(type: Test) {
        enabled = shouldTest(project, TestCategories.WebflowEvents.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.WebflowEvents.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.WebflowActions.name())) {
    task testWebflowActions(type: Test) {
        enabled = shouldTest(project, TestCategories.WebflowActions.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.WebflowActions.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.WebflowMfaActions.name())) {
    task testWebflowMfaActions(type: Test) {
        enabled = shouldTest(project, TestCategories.WebflowMfaActions.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.WebflowMfaActions.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.CosmosDb.name())) {
    task testCosmosDb(type: Test) {
        enabled = shouldTest(project, TestCategories.CosmosDb.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.CosmosDb.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.ZooKeeper.name())) {
    task testZooKeeper(type: Test) {
        enabled = shouldTest(project, TestCategories.ZooKeeper.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.ZooKeeper.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.JMS.name())) {
    task testJMS(type: Test) {
        enabled = shouldTest(project, TestCategories.JMS.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.JMS.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.AmazonWebServices.name())) {
    task testAmazonWebServices(type: Test) {
        enabled = shouldTest(project, TestCategories.AmazonWebServices.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.AmazonWebServices.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Radius.name())) {
    task testRadius(type: Test) {
        enabled = shouldTest(project, TestCategories.Radius.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Radius.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Couchbase.name())) {
    task testCouchbase(type: Test) {
        enabled = shouldTest(project, TestCategories.Couchbase.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Couchbase.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.CouchDb.name())) {
    task testCouchDb(type: Test) {
        enabled = shouldTest(project, TestCategories.CouchDb.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.CouchDb.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.MySQL.name())) {
    task testMySQL(type: Test) {
        enabled = shouldTest(project, TestCategories.MySQL.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.MySQL.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Postgres.name())) {
    task testPostgres(type: Test) {
        enabled = shouldTest(project, TestCategories.Postgres.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Postgres.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.MsSqlServer.name())) {
    task testMsSqlServer(type: Test) {
        enabled = shouldTest(project, TestCategories.MsSqlServer.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.MsSqlServer.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.MariaDb.name())) {
    task testMariaDb(type: Test) {
        enabled = shouldTest(project, TestCategories.MariaDb.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.MariaDb.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.DynamoDb.name())) {
    task testDynamoDb(type: Test) {
        enabled = shouldTest(project, TestCategories.DynamoDb.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.DynamoDb.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Ehcache.name())) {
    task testEhcache(type: Test) {
        enabled = shouldTest(project, TestCategories.Ehcache.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Ehcache.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.FileSystem.name())) {
    task testFileSystem(type: Test) {
        enabled = shouldTest(project, TestCategories.FileSystem.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.FileSystem.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Ignite.name())) {
    task testIgnite(type: Test) {
        enabled = shouldTest(project, TestCategories.Ignite.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Ignite.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.InfluxDb.name())) {
    task testInfluxDb(type: Test) {
        enabled = shouldTest(project, TestCategories.InfluxDb.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.InfluxDb.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Oracle.name())) {
    task testOracle(type: Test) {
        enabled = shouldTest(project, TestCategories.Oracle.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Oracle.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Ldap.name())) {
    task testLdap(type: Test) {
        enabled = shouldTest(project, TestCategories.Ldap.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Ldap.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Groovy.name())) {
    task testGroovy(type: Test) {
        enabled = shouldTest(project, TestCategories.Groovy.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Groovy.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Mail.name())) {
    task testMail(type: Test) {
        enabled = shouldTest(project, TestCategories.Mail.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Mail.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.RestfulApi.name())) {
    task testRestfulApi(type: Test) {
        enabled = shouldTest(project, TestCategories.RestfulApi.name())
        timeout = Duration.ofMinutes(30)
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.RestfulApi.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Memcached.name())) {
    task testMemcached(type: Test) {
        enabled = shouldTest(project, TestCategories.Memcached.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Memcached.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.MongoDb.name())) {
    task testMongoDb(type: Test) {
        enabled = shouldTest(project, TestCategories.MongoDb.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.MongoDb.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.Redis.name())) {
    task testRedis(type: Test) {
        enabled = shouldTest(project, TestCategories.Redis.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.Redis.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.OAuth.name())) {
    task testOAuth(type: Test) {
        enabled = shouldTest(project, TestCategories.OAuth.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.OAuth.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.UMA.name())) {
    task testUMA(type: Test) {
        enabled = shouldTest(project, TestCategories.UMA.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.UMA.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.OIDC.name())) {
    task testOIDC(type: Test) {
        enabled = shouldTest(project, TestCategories.OIDC.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.OIDC.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.SAML.name())) {
    task testSAML(type: Test) {
        enabled = shouldTest(project, TestCategories.SAML.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.SAML.name()
        }
    }
}

if (hasTestsOfCategory(project, TestCategories.JDBC.name())) {
    task testJDBC(type: Test) {
        enabled = shouldTest(project, TestCategories.JDBC.name())
        //finalizedBy jacocoTestReport
        useJUnitPlatform {
            includeTags TestCategories.JDBC.name()
        }
    }
}

test {
    enabled = false
    onlyIf = {
        false
    }
}

tasks.withType(Test) {
    scanForTestClasses = false
    ignoreFailures = Boolean.getBoolean("ignoreTestFailures")
    forkEvery = 1000
    doFirst {
        maxParallelForks = project.ext.properties.get("maxParallelForksForTests", 2)
        if (maxParallelForks != 2) {
            logger.info "Maximum number of parallel forks is set to ${maxParallelForks}"
        }
    }
    if (System.getenv().containsKey("CI")) {
        outputs.upToDateWhen { false }
    }
    systemProperty("spring.main.banner-mode", "off")
//    systemProperty("spring.main.lazy-initialization", "true")
    systemProperty("CI", System.getProperty("CI"))

    failFast = true

    def list = []
    list.add("--add-modules")
    list.add("java.se")
    list.add("--add-exports")
    list.add("java.base/jdk.internal.ref=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.lang=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.nio=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/sun.nio.ch=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.management/sun.management=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("jdk.management/com.sun.management.internal=ALL-UNNAMED")
    list.add("-Xms512m")
    list.add("-Xmx4g")
    jvmArgs = list

    classpath = it.classpath + files("${projectDir}/src/main/resources") + files("${projectDir}/src/test/resources")
    testLogging {
        events = ["FAILED", "STANDARD_OUT"]
        exceptionFormat = "full"
        showStandardStreams = Boolean.getBoolean("showStandardStreams")
        showExceptions = true
        showCauses = true
        beforeSuite { desc ->
            if (!desc.parent) {
                println "Started running test suite [${desc.displayName}] @ ${new java.util.Date()} "
            }
        }
        beforeTest { desc ->
            println "Started running test [${desc.className}:${desc.displayName}] @ ${new java.util.Date()} "
        }
        afterTest { desc, result ->
            println """
Results for test [${desc.className}:${desc.displayName}]: ${result.resultType} @ ${new java.util.Date()} 
(${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)
"""
        }
        afterSuite { desc, result ->
            if (!desc.parent) {
                println """
Results for test suite [${desc.displayName}]: ${result.resultType} @ ${new java.util.Date()} 
(${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)
"""
            }
        }
    }
    if (!Boolean.getBoolean("skipTestRetry")) {
        retry {
            maxRetries = 3
            maxFailures = 5
            failOnPassedAfterRetry = false
        }
    }
    jacoco {
        dumpOnExit = true
        excludes = rootProject.excludedFilesFromTestCoverage
    }
}

def shouldTest(Project project, String category) {
    def foundTest = gradle.startParameter.taskNames.any {task -> task.matches(/^test${category}$/) }
    if (!foundTest) {
        logger.debug "No tests with category ${category} found for ${project.name}"
    }
    return !Boolean.getBoolean("skipTests") && foundTest  && hasTestsOfCategory(project, category)
}

def hasTestsOfCategory(Project project, String category) {
    def testSrc = project.sourceSets.test.java.srcDirs
    def res = srcTagMap.computeIfAbsent(testSrc) {
        def tags = new HashSet()
        testSrc.each { src ->
            try {
                src.eachFileRecurse { file ->
                    if (file ==~ /.*Tests\.\w+/) {
                        file.readLines().parallelStream().forEach() { line ->
                            def m = line =~ /^\s*@Tag\("(\w+)"\)\s*$/
                            if (m) {
                                tags.addAll(m.collect { it[1] })
                            }
                        }
                    }
                }
            } catch (ignored) {
            }
        }
        tags
    }
    res.contains(category)
}

