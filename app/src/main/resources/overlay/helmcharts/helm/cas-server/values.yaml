# Default values for cas-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

casServerName: www.example.org

replicaCount: 1

image:
  registry: ""
  repository: "apereo/cas"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# There are two valid stateful set update strategies, RollingUpdate and the (legacy) OnDelete
updateStrategy: RollingUpdate

# OrderedReady: Pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. 
#   When scaling down, the pods are removed in the opposite order.
# Parallel: Creates pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
podManagementPolicy: OrderedReady

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Map folder for logs directory from host or pvc, or leave both blank to use emptyDir volume
# In docker for windows hostPath could be '/host_mnt/c/opt/cas/logs'
# Windows: Give full access local Users group to the  to ~/.docker folder if getting permission denied)
logdir:
#  hostPath: '/host_mnt/c/opt/cas/logs'
  hostPath: ''
  claimName: ''
  mountPath: '/var/log'

# CAS Server container properties
casServerContainer:
  ## JVM Settings
  ## JVM settings only used if command not set, use args to set app arguments
  jvm:
    ## Extra JVM options
    ##
    extraOpts:
    ## Memory settings: If these aren't defined, java will calc values automatically, but requires setting limits on pod
    ## so it doesn't base heap size on host memory
    maxHeapOpt: -Xmx2G
    newHeapOpt: -Xms600M
  casWarPath: 'cas.war'
  ## Override cmd
  ##
  command:
  ## Override args
  ##
  args:
  ## extraVolumes and extraVolumeMounts allows you to mount other volumes
  ## Examples:
  ## extraVolumeMounts:
  ##   - name: extras
  ##     mountPath: /usr/share/extras
  ##     readOnly: true
  ## extraVolumes:
  ##   - name: extras
  ##     emptyDir: {}
  ##
  extraVolumeMounts: []
  extraVolumes: []
  ## Url to use for readiness, startupprobe, and liveliness check, change to health actuator if the module is available
  ## Naming it "default" in case in future template supports individual urls for the different checks, with this as default if they aren't specified
  defaultStatusUrl: '/cas/login'
  ## An array to add extra env vars
  ## For example:
  ## extraEnvVars:
  ##  - name: MY_ENV_VAR
  ##    value: env_var_value
  ##
  extraEnvVars: []

  ## Name of a ConfigMap containing extra env vars
  ##
  extraEnvVarsConfigMap: ''

  ## Name of a Secret containing extra env vars
  ##
  extraEnvVarsSecret: ''
  ## Choose which config files from casConfig to mount
  casConfigMounts:
    - 'cas.properties'
    - 'cas.yaml'
  ## Create various config files from casConfig that may or may not be mounted
  casConfig:
    cas.properties: |-
      cas.server.name=https://{{ .Values.casServerName }}
      cas.server.prefix=${cas.server.name}/cas
    cas.yaml: |-
      logging:
        config: 'file:/etc/cas/config/log4j2.xml'

# name of secret containing server keystore
serverKeystoreExistingSecret: cas-server-keystore
# folder that should container the keystore
serverKeystoreMountPath: '/etc/cas/thekeystore'
# name of keystore file in container and in secret
serverKeystoreSubPath: 'thekeystore'

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8443

cas:
  listenPortHttps: 8443

## Override parts of this ingress in your own values file with appropriate host names
## This currently is only set up to work with Nginx Ingress Controller from Kubernetes project
ingress:
  enabled: true
  annotations: 
    nginx.ingress.kubernetes.io/session-cookie-samesite: "None"
    nginx.ingress.kubernetes.io/session-cookie-conditional-samesite-none: "true"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "sticky-session-route"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
    nginx.ingress.kubernetes.io/rewrite-target: "/cas"
    nginx.ingress.kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"    
  hosts:
    - host: www.example.org
      paths:
        - "/cas"
    - host: kubernetes.docker.internal
      paths:
        - "/cas"
  tls:
    - secretName: cas-server-tls
      hosts:
        - www.example.org
        - kubernetes.docker.internal

# Request some resources so kubernetes will schedule somewhere with enough resources
# Limits can also be set if desired
resources: 
  requests:
    cpu: 100m
    memory: 512Mi
#  limits:
#    cpu: 100m
#    memory: 128Mi


nodeSelector: {}

tolerations: []

affinity: {}
